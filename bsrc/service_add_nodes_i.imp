/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_add_nodes_i

REFINES
    service_add_nodes

SEES
    constants,
    constants_statuscodes_bs,
    message_in_bs,
    message_out_bs

DEFINITIONS
    "address_space.def"

IMPORTS
    msg_node_management_add_nodes,
    node_management_add_nodes_items_it,
    service_add_nodes_1

/* Note: We would like to use EXTENDS instead of IMPORTS + PROMOTES,
   but it would trigger a bug in the project check. */

PROMOTES
    treat_write_request,

    is_mandatory_attribute,
    read_Node_Attribute,
    readall_AddressSpace_Node,
    get_NodeClass,
    get_BrowseName,
    get_DisplayName,
    is_transitive_subtype,
    is_valid_ReferenceTypeId,
    is_NodeId_equal,
    get_TypeDefinition,
    get_Reference_ReferenceType,
    get_Reference_TargetNode,
    get_Reference_IsForward,
    get_Node_RefIndexEnd,
    get_RefIndex_Reference,
    get_Value_StatusCode,
    read_AddressSpace_clear_value,
    read_AddressSpace_free_variant,
    is_local_service_treatment,
    set_local_service_treatment,
    get_user_authorization ,
    get_Executable,
    get_InputArguments,
    get_conv_Variant_ValueRank,
    get_conv_Variant_Type,
    read_variable_compat_type,
    check_object_has_method,
    check_nodeId_isValid,
    is_IndexRangeDefined

LOCAL_OPERATIONS

    treat_add_nodes_items(p_user, p_req_msg, p_resp_msg, p_nb_nodes_to_add) =
    PRE
        p_user : t_user_i        &
        p_user : t_user          &
        p_req_msg : t_msg_i  &
        p_req_msg = c_msg_in &
        c_msg_in : t_msg         &
        a_msg_in_type = e_msg_node_add_nodes_req &
        p_resp_msg : t_msg_i   &
        p_resp_msg = c_msg_out &
        c_msg_out : t_msg &
        a_msg_out_type = e_msg_node_add_nodes_resp &
        AddNodeItemResp_Allocated = TRUE &
        p_nb_nodes_to_add : NAT &
        p_nb_nodes_to_add : t_nodeToAddReqIndex &
        p_nb_nodes_to_add = nb_nodes_to_add
    THEN
        d_adsp_nodes_variables,
        AddNodeItemResp_AddedNodeId,
        AddNodeItemResp_StatusCode
        :(d_adsp_nodes_invariant &
            AddNodeItemResp_AddedNodeId : 1..nb_nodes_to_add --> t_NodeId_i &
            AddNodeItemResp_StatusCode  : 1..nb_nodes_to_add --> t_StatusCode
        )
    END

OPERATIONS

    /* LOCAL_OPERATIONS */

    treat_add_nodes_items(p_user, p_req_msg, p_resp_msg, p_nb_nodes_to_add) =
    VAR
        l_continue,
        l_index,
        l_sc,
        l_parentExpNid,
        l_refTypeId,
        l_reqExpNodeId,
        l_browseName,
        l_nodeClass,
        l_nodeAttributes,
        l_typeDefId,
        l_new_nid
    IN
        /* Check global user rights ? */
        l_continue <-- init_iter_add_nodes_items(p_nb_nodes_to_add);
        WHILE l_continue = TRUE DO
            l_continue, l_index <-- continue_iter_add_nodes_items;
            l_new_nid := c_NodeId_indet;
            l_sc, l_parentExpNid, l_refTypeId, l_reqExpNodeId, l_browseName, l_nodeClass, l_nodeAttributes, l_typeDefId
              <-- getall_add_node_item_req_params (p_req_msg, l_index);
            IF l_sc = e_sc_ok
            THEN
                /* Check user rights ? (what if no requested node id) ? */
                l_sc := e_sc_ok
            END
            ;
            IF l_sc = e_sc_ok
            THEN
                l_sc, l_new_nid <-- treat_add_nodes_item(l_parentExpNid, l_refTypeId, l_reqExpNodeId, l_browseName, l_nodeClass, l_nodeAttributes, l_typeDefId)
            END
            ;
            setall_msg_add_nodes_item_resp_params (p_resp_msg, l_index, l_sc, l_new_nid)

        INVARIANT
            rreqs_to_iterate <: t_monitoredItemReqIndex &
            rreqs_iterated   <: t_monitoredItemReqIndex &
            rreqs_to_iterate /\ rreqs_iterated = {} &
            rreqs_to_iterate \/ rreqs_iterated = 1..nb_nodes_to_add &
            l_continue = bool(rreqs_to_iterate /= {})
        VARIANT
            card(rreqs_to_iterate)
        END
    END
    ;

    /* OPERATIONS */

    StatusCode_service <-- treat_add_nodes_request(p_user, p_req_msg, p_resp_msg) =
    VAR
        l_sc,
        l_nb_nodes_to_add,
        l_bres
    IN
        StatusCode_service := e_sc_ok;
        l_bres := FALSE;
        l_sc, l_nb_nodes_to_add <-- getall_msg_add_nodes_req_params (p_req_msg);
        IF l_sc = e_sc_ok
        THEN
            l_bres <-- alloc_msg_add_nodes_resp_results (p_resp_msg, l_nb_nodes_to_add);
            IF l_bres = TRUE
            THEN
                StatusCode_service := e_sc_ok;
                treat_add_nodes_items(p_user, p_req_msg, p_resp_msg, l_nb_nodes_to_add)
            ELSE
                StatusCode_service := e_sc_bad_out_of_memory
            END
        ELSE
            StatusCode_service := l_sc
        END
    END

END
