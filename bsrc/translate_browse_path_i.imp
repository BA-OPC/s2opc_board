/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    translate_browse_path_i
REFINES
    translate_browse_path

SEES
    address_space_itf,
    constants,
    constants_statuscodes_bs,
    node_id_pointer_bs,
    message_in_bs,
    message_out_bs

IMPORTS
    translate_browse_path_1,
    msg_translate_browse_path_bs,
    translate_browse_path_element_it,
    translate_browse_path_source_it,
    translate_browse_path_result_it,
    browse_treatment

PROMOTES
    alloc_browse_path_result,
    write_translate_browse_paths_response,
    free_translate_browse_paths_response,
    read_nb_BrowsePaths,
    set_browse_value_context,
    set_browse_value_context_from_continuation_point,
    clear_browse_value_context,
    getall_and_move_browse_result,
    compute_browse_result,
    release_continuation_point,
    set_session_closed,
    continuation_points_UNINITIALISATION

DEFINITIONS
    d_var_browse_value_in ==
        in_session,
        in_maxReferencesPerNode,
        in_BrowseView,
        in_BrowseValue_NodeId,
        in_BrowseValue_BrowseDirection,
        in_BrowseValue_ReferenceTypeId,
        in_BrowseValue_IncludeSubtypes,
        in_BrowseValue_NodeClassMask,
        in_BrowseValue_ResultMask,
        in_ReleasePrevContinuationPoint,
        isBrowseValueContextDefined;

    d_var_browse_result_out ==
        out_BrowseResult_BrowseStatus,
        out_BrowseResult_ContinuationPointId,
        out_BrowseResult_nb_References,
        out_BrowseResult_ReferenceTypeId,
        out_BrowseResult_isForward,
        out_BrowseResult_NodeId,
        out_BrowseResult_BrowseName,
        out_BrowseResult_DisplayName,
        out_BrowseResult_NodeClass,
        out_BrowseResult_TypeDefinition,
        out_BrowseResultReferences,

        isBrowseResultComputed,
        isBrowseResultAllocated
        ;

    d_var_browse_source_it ==
        browsePathSourceIdx_to_iterate,
        browsePathSourceIdx_iterated,
        nb_browsePathSourceIdx_max_refs,
        nextBrowsePathSourceIdx
        ;

    d_var_element_it ==
        elements_to_iterate,
        elements_iterated,
        relativePath,
        relativePathEls
        ;

    d_var_browse_path ==
        BrowsePathSource,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        ;

    d_inv_browse_value_in ==
    (   in_session                       : t_session_i           &
        in_maxReferencesPerNode          : NAT                   &
        in_BrowseView                    : t_NodeId_i            &
        in_BrowseValue_NodeId            : t_NodeId_i            &
        in_BrowseValue_BrowseDirection   : t_BrowseDirection_i   &
        in_BrowseValue_ReferenceTypeId   : t_NodeId_i            &
        in_BrowseValue_IncludeSubtypes   : BOOL                  &
        in_BrowseValue_NodeClassMask     : t_BrowseNodeClassMask_i &
        in_BrowseValue_ResultMask        : t_BrowseResultMask_i  &
        in_ReleasePrevContinuationPoint  : BOOL                  &
        isBrowseValueContextDefined      : BOOL
    );

    d_inv_browse_result_out ==
    (   out_BrowseResult_BrowseStatus      : t_StatusCode_i             &
        out_BrowseResult_ContinuationPointId : t_ContinuationPointId_i  &
        out_BrowseResult_nb_References     : NAT                        &
        out_BrowseResult_ReferenceTypeId   : NAT +-> t_NodeId_i         &
        out_BrowseResult_isForward         : NAT +-> BOOL               &
        out_BrowseResult_NodeId            : NAT +-> t_ExpandedNodeId   &
        out_BrowseResult_BrowseName        : NAT +-> t_QualifiedName_i  &
        out_BrowseResult_DisplayName       : NAT +-> t_LocalizedText_i  &
        out_BrowseResult_NodeClass         : NAT +-> t_NodeClass_i      &
        out_BrowseResult_TypeDefinition    : NAT +-> t_ExpandedNodeId_i &
        out_BrowseResultReferences         : t_BrowseResultReferences_i &

        isBrowseResultComputed             : BOOL                       &
        isBrowseResultAllocated            : BOOL
    );

    d_inv_browse_source_it ==
    (   nb_browsePathSourceIdx_max_refs : NAT &
        browsePathSourceIdx_to_iterate <: NAT1 &
        browsePathSourceIdx_iterated   <: NAT1 &
        browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
        nb_browsePathSourceIdx_max_refs = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
        nextBrowsePathSourceIdx : NAT1
    );

    d_inv_element_it ==
    (   elements_to_iterate : seq(t_RelativePathElt)  &
        elements_iterated   : seq(t_RelativePathElt)  &
        relativePath        : t_RelativePath_i        &
        relativePathEls     : seq(t_RelativePathElt)  &
        elements_iterated ^ elements_to_iterate = relativePathEls
    )


LOCAL_OPERATIONS

    statusCode_operation <-- treat_one_relative_path_element_2(statusCode_init, loop_index, browseDirection, referenceTypeId, includedSubtypes, index, targetName) =
    PRE
        statusCode_init : t_StatusCode_i &
        loop_index : NAT1 &
        browseDirection : t_BrowseDirection_i &
        browseDirection : t_BrowseDirection &
        referenceTypeId : t_NodeId_i &
        referenceTypeId : t_NodeId &
        includedSubtypes : BOOL &
        index : NAT1 &
        targetName : t_QualifiedName_i &
        targetName : t_QualifiedName
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(  statusCode_operation : t_StatusCode_i &
            statusCode_operation : { e_sc_ok, c_StatusCode_indet,
                e_sc_bad_no_match,
                e_sc_bad_node_id_unknown,
                e_sc_bad_out_of_memory,
                e_sc_bad_query_too_complex,
                e_sc_uncertain_reference_out_of_server} &

            BrowsePathResult : seq(t_ExpandedNodeId_i)          &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1)
        ) ||

        d_var_browse_value_in,
        d_var_browse_result_out:(
            d_inv_browse_value_in &
            d_inv_browse_result_out
        )
    END
    ;

    statusCode_operation <-- treat_one_relative_path_element_1(browseDirection, referenceTypeId, includedSubtypes, index, targetName) =
    PRE
        browseDirection : t_BrowseDirection_i &
        browseDirection : t_BrowseDirection &
        referenceTypeId : t_NodeId_i &
        referenceTypeId : t_NodeId &
        includedSubtypes : BOOL &
        index : NAT1 &
        targetName : t_QualifiedName_i &
        targetName : t_QualifiedName
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(  statusCode_operation : t_StatusCode_i &

            BrowsePathResult : seq(t_ExpandedNodeId_i)          &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1)
        ) ||

        d_var_browse_value_in,
        d_var_browse_result_out:(
            d_inv_browse_value_in &
            d_inv_browse_result_out
        )
    END
    ;


    /* Fill BrowsePathResult with filtered browse result node
       Node in BrowsePathResult are a copy an should be freed
    */
    statusCode_operation <-- treat_one_relative_path_element(relativePathElt, index) =
    PRE
        IsDecoded = TRUE &
        relativePathElt : t_RelativePathElt_i &
        relativePathElt : t_RelativePathElt   &
        relativePathElt : s_RelativePathElt   &
        index : NAT1
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1) &
            size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max &
            size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingIndex)  <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingNodeId)  = size(BrowsePathRemainingIndex) &

            statusCode_operation : t_StatusCode_i &
            statusCode_operation : {e_sc_ok, e_sc_bad_node_id_unknown,
                e_sc_bad_query_too_complex, e_sc_bad_no_match,
                e_sc_bad_browse_name_invalid} &

            BrowsePathResult: seq(t_ExpandedNodeId_i) &
            ( statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>
                /* all target in BrowsePathResult has browse name equal to TargetName and
                   there is a relation between this target and at least one source through Reference_TargetNode/RefIndex_Reference */
                !(target).( target :ran(BrowsePathResult) =>
                    /* 1. TargetName in relativePathElt is equals to Browse name of target */
                    RelativePathElt_TargetName(relativePathElt) = a_BrowseName(a_NodeId~(conv_ExpandedNodeId_NodeId(target))) &
                    /* 2. there is a source which is related to target */
                    #(source).(source : ran(BrowsePathSource) & card ( { lnode, lind | lnode = a_NodeId~(source) &
                        lind : 1..Node_RefIndexEnd(a_NodeId~(source)) &
                        target = Reference_TargetNode(RefIndex_Reference(lnode |-> lind)) &
                        ( RelativePathElt_ReferenceTypeId(relativePathElt) /= c_NodeId_indet
                          =>
                          /* TODO: use isReverse */
                          RelativePathElt_ReferenceTypeId(relativePathElt) = Reference_ReferenceType(RefIndex_Reference(lnode |-> lind))
                        ) &
                        RelativePathElt_IsInverse(relativePathElt) /= Reference_IsForward(RefIndex_Reference(lnode |-> lind))
                    } ) > 0 )
                )
            ) &
            ( statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
                size(BrowsePathRemainingNodeId) > 0
            )
        ) ||

        d_var_browse_value_in,
        d_var_browse_result_out:(
            d_inv_browse_value_in &
            d_inv_browse_result_out
        )
    END
    ;

    browseDirection <-- get_browseDirection_from_isInverse(isInverse) =
    PRE
        isInverse: BOOL
    THEN
          browseDirection :(
          browseDirection : t_BrowseDirection_i &
          browseDirection : t_BrowseDirection &
          (isInverse = TRUE => browseDirection = e_bd_inverse) &
          (isInverse = FALSE => browseDirection = e_bd_forward)
         )
    END
    ;

    translate_statusCode <-- get_translateStatus_from_browseStatus(browse_statusCode)=
    PRE
        browse_statusCode : t_StatusCode_i &
        browse_statusCode : t_StatusCode
    THEN
        translate_statusCode
        :(
            translate_statusCode : t_StatusCode_i &
            translate_statusCode :  {e_sc_ok, e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex,
                                     e_sc_bad_no_match, c_StatusCode_indet} &
            (translate_statusCode = e_sc_ok => browse_statusCode = e_sc_ok ) &
            (translate_statusCode = e_sc_bad_node_id_unknown  => browse_statusCode : { e_sc_bad_node_id_unknown }) &
            (translate_statusCode = e_sc_bad_no_match  => browse_statusCode : { e_sc_bad_reference_type_id_invalid }) &
            (translate_statusCode = e_sc_bad_query_too_complex  => browse_statusCode : { e_sc_bad_out_of_memory, e_sc_bad_no_continuation_points, e_sc_bad_view_id_unknown}) &
            /* Case not specified in B model */
            (translate_statusCode = c_StatusCode_indet => browse_statusCode /: {e_sc_ok, e_sc_bad_out_of_memory, e_sc_bad_node_id_unknown,
                    e_sc_bad_reference_type_id_invalid, e_sc_bad_no_continuation_points,
                    e_sc_bad_view_id_unknown})
        )
    END
    ;

    StatusCode <-- check_startingNode(nodeid)=
    PRE
        nodeid : t_NodeId_i
    THEN
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSIF nodeid /: dom(a_NodeId~)
        THEN
            StatusCode := e_sc_bad_node_id_unknown
        ELSE
            StatusCode := e_sc_ok
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    BEGIN
        statusCode_operation,
        BrowsePathSource
        :(  statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation: {e_sc_ok, e_sc_bad_out_of_memory,
                e_sc_bad_unexpected_error} &

            (   statusCode_operation = e_sc_ok
                =>
                BrowsePathSource =
                %(idx).(idx : 1..size(BrowsePathResult) &
                    BrowsePathResult(idx) : dom(conv_ExpandedNodeId_NodeId)
                    | conv_ExpandedNodeId_NodeId(BrowsePathResult(idx)))
            )
        ) ||
        d_var_browse_source_it :(d_inv_browse_source_it)
    END
    ;

    free_BrowsePathResult =
    BEGIN
        BrowsePathResult := {}
    END
    ;

    free_BrowsePathRemaining =
    BEGIN
        BrowsePathRemainingNodeId := {} ||
        BrowsePathRemainingIndex  := {}
    END
    ;

    free_BrowsePathSource =
    BEGIN
        BrowsePathSource := {}
    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathResult(expandedNodeId) =
    PRE
        expandedNodeId : t_ExpandedNodeId_i &
        expandedNodeId : t_ExpandedNodeId
    THEN
        statusCode_operation,
        BrowsePathResult
        :(
            statusCode_operation : {e_sc_ok, e_sc_bad_query_too_complex, e_sc_bad_out_of_memory} &
            (
                statusCode_operation = e_sc_ok
                =>
                BrowsePathResult = BrowsePathResult$0 <- expandedNodeId &
                size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max
            ) &
            (
                statusCode_operation /= e_sc_ok
                =>
                BrowsePathResult = BrowsePathResult$0
            ) &
            (
                statusCode_operation = e_sc_bad_query_too_complex
                =>
                size(BrowsePathResult) = k_n_BrowsePathResPerElt_max
            )
        )

    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(expandedNodeId, index) =
    PRE
        expandedNodeId : t_ExpandedNodeId_i &
        expandedNodeId : t_ExpandedNodeId   &
        index : NAT1
    THEN
        statusCode_operation,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(
            statusCode_operation : {e_sc_uncertain_reference_out_of_server, e_sc_bad_query_too_complex, e_sc_bad_out_of_memory} &
            (
                statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 <- expandedNodeId &
                BrowsePathRemainingIndex  = BrowsePathRemainingIndex$0 <- index &
                size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max
            ) &
            (
                statusCode_operation /= e_sc_uncertain_reference_out_of_server
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
                BrowsePathRemainingIndex  = BrowsePathRemainingIndex$0
            ) &
            (
                statusCode_operation = e_sc_bad_query_too_complex
                =>
                size(BrowsePathRemainingNodeId) = k_n_BrowsePathResPerElt_max
            )
        )
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    PRE
        browsePath : t_BrowsePath_i  &
        browsePath : BrowsePaths     &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server}
    THEN
        out_statusCode_operation,
        d_var_browse_source_it,
        BrowsePath_Res_NbTargetMax,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  d_inv_browse_source_it &

            BrowsePath_Res_NbTargetMax : t_BrowsePath +-> NAT &

            out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server, e_sc_bad_query_too_complex,
                e_sc_bad_out_of_memory, e_sc_bad_too_many_matches} &
            (out_statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>
                BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult^BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) = %(xx).(xx : 1..size(BrowsePathResult) | k_n_noRemainingPathIndex ) &
                (size(BrowsePathResult) + 1 .. size(BrowsePath_Res_Target_Index(browsePath))) <| BrowsePath_Res_Target_Index(browsePath) = BrowsePathRemainingIndex &
                size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath))
            )
        )
    END
    ;

    out_statusCode_operation, statusCode_alloc <-- copy_browsePathResult_to_msg_1(browsePath, in_statusCode_operation, size_result) =
    PRE
        browsePath : t_BrowsePath_i &
        browsePath : BrowsePaths    &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server} &
        size_result : NAT &
        size_result = size(BrowsePathResult) &
        BrowsePath_Res_Target_Node(browsePath) = {} &
        BrowsePath_Res_Target_Index(browsePath) = {}
    THEN
        out_statusCode_operation,
        statusCode_alloc,
        d_var_browse_source_it,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &
            statusCode_alloc : t_StatusCode_i &
            statusCode_alloc : t_StatusCode   &

            d_inv_browse_source_it &

            BrowsePath_Res_Target_Node  : t_BrowsePath +-> seq(t_ExpandedNodeId) &
            BrowsePath_Res_Target_Index : t_BrowsePath +-> seq(NAT) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Node) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Index) &

            size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath)) &
            size(BrowsePath_Res_Target_Node(browsePath)) <= BrowsePath_Res_NbTargetMax(browsePath) &

            /* Success of copy of all browse paths */
            (statusCode_alloc = e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..size(BrowsePathResult)) * {k_n_noRemainingPathIndex}
            )
        )
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg_2(browsePath, in_statusCode_operation, nb_max_ref) =
    PRE
        browsePath : t_BrowsePath_i &
        browsePath : BrowsePaths    &
        browsePath : dom(BrowsePath_Res_NbTargetMax) &
        in_statusCode_operation : t_StatusCode_i &
        in_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                   e_sc_bad_out_of_memory} &
        nb_max_ref : NAT &
        nb_max_ref = size(BrowsePathRemainingNodeId) &
        size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePathResult)
    THEN
        out_statusCode_operation,
        d_var_browse_source_it,
        BrowsePath_Res_Target_Node,
        BrowsePath_Res_Target_Index
        :(  out_statusCode_operation : t_StatusCode_i &
            out_statusCode_operation : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            d_inv_browse_source_it &

            BrowsePath_Res_Target_Node  : t_BrowsePath +-> seq(t_ExpandedNodeId) &
            BrowsePath_Res_Target_Index : t_BrowsePath +-> seq(NAT) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Node) &
            dom(BrowsePath_Res_NbTargetMax) = dom(BrowsePath_Res_Target_Index) &

            size(BrowsePath_Res_Target_Node(browsePath)) = size(BrowsePath_Res_Target_Index(browsePath)) &
            size(BrowsePath_Res_Target_Node(browsePath)) <= BrowsePath_Res_NbTargetMax(browsePath) &

            /* Previous copy of BrowsePathResult remains unchanged */
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node$0(browsePath) &
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index$0(browsePath) &
            /* Success of copy of all remaining browse paths */
            (out_statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server} =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    BrowsePathRemainingIndex
            )
        )
    END
    ;

    statusCode_operation, nbReferences <-- compute_browse_result_from_source(source, browseDirection, referenceTypeId, includedSubtypes) =
    PRE
        source : t_NodeId_i &
        browseDirection : t_BrowseDirection_i &
        browseDirection : t_BrowseDirection &
        referenceTypeId : t_NodeId_i &
        referenceTypeId : t_NodeId &
        includedSubtypes : BOOL
    THEN
        statusCode_operation,
        nbReferences
        :(
            statusCode_operation : t_StatusCode_i &
            statusCode_operation :  {e_sc_ok,
                e_sc_bad_no_match,
                e_sc_bad_node_id_unknown,
                e_sc_bad_out_of_memory,
                e_sc_bad_query_too_complex} &

            nbReferences : NAT &
            nbReferences <= k_n_BrowseTarget_max
        ) ||

        d_var_browse_value_in,
        d_var_browse_result_out:(
            d_inv_browse_value_in &
            d_inv_browse_result_out
        )
    END
    ;

    statusCode_operation <-- treat_browse_result_one_source(index, targetName, nbReferences) =
    PRE
        index : NAT1 &
        nbReferences : NAT &
        nbReferences : dom(out_BrowseResult_NodeId) &
        targetName : t_QualifiedName_i &
        targetName : t_QualifiedName
    THEN
        statusCode_operation,
        BrowsePathResult,
        BrowsePathRemainingNodeId,
        BrowsePathRemainingIndex
        :(

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1) &
            size(BrowsePathResult) <= k_n_BrowsePathResPerElt_max &
            size(BrowsePathRemainingNodeId) <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingIndex)  <= k_n_BrowsePathResPerElt_max  &
            size(BrowsePathRemainingNodeId)  = size(BrowsePathRemainingIndex) &

            statusCode_operation : t_StatusCode_i &
            statusCode_operation : {e_sc_ok,
                e_sc_bad_no_match,
                e_sc_bad_node_id_unknown,
                e_sc_bad_out_of_memory,
                e_sc_bad_query_too_complex,
                e_sc_uncertain_reference_out_of_server} &

            dom(BrowsePathResult$0) <| BrowsePathResult = BrowsePathResult$0 &
            dom(BrowsePathRemainingNodeId$0) <| BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
            dom(BrowsePathRemainingIndex$0) <| BrowsePathRemainingIndex = BrowsePathRemainingIndex$0 &

            ( statusCode_operation : { e_sc_ok, e_sc_uncertain_reference_out_of_server }
                =>

                /* all target in BrowsePathResult has browse name equal to TargetName and
                is equal to a browse result */
                !(bpri).( bpri : size(BrowsePathResult$0)+1 .. size(BrowsePathResult) =>
                    #(bri).(bri : 1..nbReferences &
                        out_BrowseResult_NodeId(bri) = BrowsePathResult(bpri) &
                        out_BrowseResult_BrowseName(bri) = targetName))
            ) &
            ( statusCode_operation = e_sc_uncertain_reference_out_of_server
                =>
               BrowsePathRemainingNodeId /= BrowsePathRemainingNodeId$0 &
               !(bpri).( bpri : size(BrowsePathRemainingNodeId$0)+1 .. size(BrowsePathRemainingNodeId) =>
                   index = BrowsePathRemainingIndex(bpri) &
                    #(bri).(bri : 1..nbReferences &
                        out_BrowseResult_NodeId(bri) = BrowsePathRemainingNodeId(bpri) &
                        out_BrowseResult_BrowseName(bri) = targetName))
            ) &
            ( statusCode_operation = e_sc_ok
                =>
                BrowsePathRemainingNodeId = BrowsePathRemainingNodeId$0 &
                BrowsePathRemainingIndex = BrowsePathRemainingIndex$0
            )
        )
    END
    ;

    statusCode_operation <-- treat_one_translate_browse_path_1(statusCode_init, source) =
    PRE
        IsDecoded = TRUE &
        statusCode_init : t_StatusCode_i &
        statusCode_init : t_StatusCode   &
        source : t_NodeId_i &
        source : t_NodeId
    THEN
        statusCode_operation,
        BrowsePathSource,
        BrowsePathResult, BrowsePathRemainingNodeId, BrowsePathRemainingIndex
        :(
            statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, e_sc_bad_no_match,
                e_sc_bad_out_of_memory, e_sc_bad_unexpected_error} &

            BrowsePathSource : seq(t_NodeId_i) &

            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex : seq(NAT1)
        ) ||

        d_var_browse_value_in,
        d_var_browse_result_out,
        d_var_browse_source_it,
        d_var_element_it
        :(  d_inv_browse_value_in &
            d_inv_browse_result_out &
            d_inv_browse_source_it  &
            d_inv_element_it
        )
    END
    ;

    statusCode_operation, p_continue <-- treat_one_translate_browse_path_1_1(rel_path_elt, index, continue) =
    PRE
        IsDecoded = TRUE &
        rel_path_elt : t_RelativePathElt_i &
        rel_path_elt : t_RelativePathElt   &
        rel_path_elt : s_RelativePathElt   &
        index : NAT1 &
        continue : BOOL
    THEN
        statusCode_operation,
        p_continue,
        d_var_browse_path
        :(  statusCode_operation : t_StatusCode_i &
            statusCode_operation : t_StatusCode   &
            statusCode_operation : {e_sc_ok, e_sc_uncertain_reference_out_of_server,
                e_sc_bad_node_id_unknown, e_sc_bad_query_too_complex, e_sc_bad_no_match,
                e_sc_bad_out_of_memory, e_sc_bad_unexpected_error} &
            p_continue : BOOL &

            BrowsePathSource : seq(t_NodeId_i) &
            BrowsePathResult : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingNodeId : seq(t_ExpandedNodeId_i) &
            BrowsePathRemainingIndex  : seq(NAT1)
        ) ||

        d_var_browse_source_it,
        d_var_browse_value_in,
        d_var_browse_result_out
        :(  d_inv_browse_source_it &
            d_inv_browse_value_in &
            d_inv_browse_result_out
        )
    END

OPERATIONS

    StatusCode_service <-- init_translate_browse_paths_request(req_msg) =
    VAR
        l_nb_BrowsePaths
    IN
        StatusCode_service <-- decode_translate_browse_paths_request(req_msg);
        IF StatusCode_service = e_sc_ok
        THEN
            l_nb_BrowsePaths <-- read_nb_BrowsePaths;
            IF l_nb_BrowsePaths = 0
            THEN
                StatusCode_service := e_sc_bad_nothing_to_do
            ELSE
                StatusCode_service <-- alloc_browse_path_result;
                IF StatusCode_service /= e_sc_ok
                THEN
                    StatusCode_service := e_sc_bad_too_many_ops
                END
            END
        END
    END
    ;

    treat_one_translate_browse_path(browsePath) =
    VAR
        l_statusCode_operation,
        l_statusCode_operation_2,
        l_continue,
        l_relativePath,
        l_source,
        l_statusCode_init
    IN
        l_relativePath <-- read_BrowsePath_RelativePath(browsePath);
        l_source <-- read_BrowsePath_StartingNode(browsePath);
        l_continue <-- init_iter_relativePath(l_relativePath);
        l_statusCode_operation <-- check_startingNode(l_source);
        IF l_continue = FALSE
        THEN
            // There is no element in the path
            write_BrowsePath_Res_StatusCode(browsePath, e_sc_bad_nothing_to_do)
        ELSIF l_statusCode_operation /= e_sc_ok
        THEN
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation)
        ELSE
            l_statusCode_init := l_statusCode_operation;
            l_statusCode_operation <--
                treat_one_translate_browse_path_1(l_statusCode_init, l_source);

            IF l_statusCode_operation = e_sc_ok or
                l_statusCode_operation = e_sc_uncertain_reference_out_of_server
            THEN
                l_statusCode_operation_2 := l_statusCode_operation;
                l_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, l_statusCode_operation_2)
            END
            ;
            write_BrowsePath_Res_StatusCode(browsePath, l_statusCode_operation);
            free_BrowsePathResult;
            free_BrowsePathRemaining
        END
    END
    ;

    /* LOCAL_OPERATION */
    statusCode_operation <-- treat_one_relative_path_element_2(statusCode_init, loop_index, browseDirection, referenceTypeId, includedSubtypes, index, targetName) =
    VAR
        l_source,
        l_translate_statusCode,
        l_nbReferences
    IN
        /* Status code before this operation is called */
        statusCode_operation := statusCode_init;

        l_source <-- get_BrowsePathSource(loop_index);

        l_translate_statusCode, l_nbReferences
        <-- compute_browse_result_from_source(l_source,
                                              browseDirection,
                                              referenceTypeId,
                                              includedSubtypes);
        ASSERT l_translate_statusCode /= c_StatusCode_indet THEN
            /* Check browse result status */
            IF l_translate_statusCode /= e_sc_ok THEN
                statusCode_operation := l_translate_statusCode
            ELSE
                l_translate_statusCode <-- treat_browse_result_one_source(index, targetName, l_nbReferences);
                IF statusCode_operation /= e_sc_ok THEN
                    statusCode_operation := l_translate_statusCode
                END /* ELSE keep e_sc_ok status code for operation since it succeeded for at least one source */
                ;
                clear_browse_result
            END
        END
    END
    ;

    statusCode_operation <-- treat_one_relative_path_element_1(browseDirection, referenceTypeId, includedSubtypes, index, targetName) =
    VAR
        l_size,
        l_index,
        l_continue_source,
        l_translate_statusCode,
        l_includedSubtypes,
        l_targetName
    IN
        statusCode_operation := e_sc_bad_nothing_to_do;
        l_size <--get_BrowsePathSourceSize;
        l_continue_source <-- init_iter_browsePathSourceIdx(l_size);
        l_translate_statusCode := statusCode_operation;

        WHILE l_continue_source = TRUE
        DO
            l_continue_source, l_index <-- continue_iter_browsePathSourceIdx;

            statusCode_operation <--
                treat_one_relative_path_element_2(l_translate_statusCode,
                                                  l_index, browseDirection,
                                                  referenceTypeId,
                                                  includedSubtypes,
                                                  index, targetName);
            l_translate_statusCode := statusCode_operation
        INVARIANT

            browsePathSourceIdx_to_iterate <: NAT1 &
            browsePathSourceIdx_iterated   <: NAT1 &
            browsePathSourceIdx_to_iterate /\ browsePathSourceIdx_iterated = {} &
            l_size = card(browsePathSourceIdx_to_iterate \/ browsePathSourceIdx_iterated) &
            browsePathSourceIdx_iterated = 1 .. l_index &
            browsePathSourceIdx_to_iterate = l_index + 1 .. l_size &
            l_continue_source = bool(l_index + 1 < l_size)
        VARIANT
            l_size - l_index
        END
    END
    ;


    statusCode_operation <-- treat_one_relative_path_element(relativePathElt, index) =
    VAR
        /* RelativePathElt info */
        l_referenceTypeId,
        l_isInverse,
        l_includedSubtypes,
        l_targetName,
        l_browseDirection,

        l_name_empty,
        l_translate_statusCode,

        l_continue_source,
        l_size,
        l_index
    IN
        /* Get RelativePathElt info for browse */
        l_referenceTypeId <-- read_RelativePathElt_ReferenceTypeId(relativePathElt);
        IF l_referenceTypeId  = c_NodeId_indet THEN
            /* Part 4: Services - Release 1.04
            Table 168 – RelativePath
            If not specified then all References are included and the parameter includeSubtypes is ignored.
            */
            l_includedSubtypes := FALSE
        ELSE
            l_includedSubtypes <-- read_RelativePathElt_IncludedSubtypes(relativePathElt)
        END
        ;
        l_isInverse <-- read_RelativePathElt_IsInverse(relativePathElt);
        l_targetName <-- read_RelativePathElt_TargetName(relativePathElt);
        l_browseDirection <-- get_browseDirection_from_isInverse(l_isInverse);

        l_name_empty <-- is_QualifiedNames_Empty(l_targetName);
        IF l_name_empty = TRUE THEN
            statusCode_operation := e_sc_bad_browse_name_invalid
        ELSE
            statusCode_operation <--
                treat_one_relative_path_element_1(l_browseDirection, l_referenceTypeId,
                                                  l_includedSubtypes, index, l_targetName)
        END
    END
    ;

    browseDirection <-- get_browseDirection_from_isInverse(isInverse) =
    IF isInverse = TRUE
    THEN
        browseDirection := e_bd_inverse
    ELSE
        browseDirection := e_bd_forward
    END
    ;

    translate_statusCode <-- get_translateStatus_from_browseStatus(browse_statusCode)=
    BEGIN
        /* Check browse result status */
        CASE browse_statusCode OF
            EITHER e_sc_bad_node_id_unknown
            THEN
                translate_statusCode := e_sc_bad_node_id_unknown
            OR e_sc_bad_reference_type_id_invalid
            THEN
                translate_statusCode := e_sc_bad_no_match
            OR e_sc_bad_out_of_memory, e_sc_bad_no_continuation_points, e_sc_bad_view_id_unknown
            THEN
                // e_sc_bad_view_id_unknown should not happen because view is indet
                translate_statusCode := e_sc_bad_query_too_complex
            OR e_sc_ok
            THEN
                translate_statusCode := e_sc_ok
            ELSE
                translate_statusCode := c_StatusCode_indet
            END
        END
    END
    ;

    StatusCode <-- check_startingNode(nodeid)=
    VAR
        l_isvalid,
        l_src_node
    IN
        StatusCode := e_sc_ok;
        IF nodeid = c_NodeId_indet
        THEN
            StatusCode := e_sc_bad_node_id_invalid
        ELSE
            l_isvalid, l_src_node <-- readall_AddressSpace_Node(nodeid);
            IF l_isvalid = FALSE
            THEN
                StatusCode := e_sc_bad_node_id_unknown
            END
        END
    END
    ;

    statusCode_operation <-- copy_browsePathResult_to_source =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId,
        l_local_server,
        l_nodeId,
        l_alloc,
        l_source_copy
    IN
        statusCode_operation := e_sc_ok;
        l_size <-- get_BrowsePathResultSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        l_alloc := FALSE;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            IF l_expandedNodeId /= c_ExpandedNodeId_indet
            THEN
                l_local_server, l_nodeId <-- getall_conv_ExpandedNodeId_NodeId(l_expandedNodeId);
                ASSERT l_local_server = TRUE THEN
                    l_alloc, l_source_copy <-- copy_node_id_pointer_content (l_nodeId);
                    IF l_alloc = TRUE THEN
                        add_BrowsePathSource(l_source_copy)
                    ELSE
                        free_BrowsePathSource;
                        statusCode_operation := e_sc_bad_out_of_memory;
                        l_continue := FALSE
                    END
                END
            ELSE
                free_BrowsePathSource;
                statusCode_operation := e_sc_bad_unexpected_error;
                l_continue := FALSE
            END
        INVARIANT

            (l_alloc = FALSE => BrowsePathSource = {})

        VARIANT
            0
        END
    END
    ;

    free_BrowsePathResult =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId
    IN
        l_size <-- get_BrowsePathResultSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            free_ExpandedNodeId(l_expandedNodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathResult
    END
    ;

    free_BrowsePathRemaining =
    VAR
        l_size,
        l_continue,
        l_index,
        l_expandedNodeId
    IN
        l_size <-- get_BrowsePathRemainingSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            free_ExpandedNodeId(l_expandedNodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathRemaining
    END
    ;

    free_BrowsePathSource =
    VAR
        l_size,
        l_continue,
        l_index,
        l_nodeId
    IN
        l_size <-- get_BrowsePathSourceSize;
        l_continue <-- init_iter_browsePathSourceIdx(l_size);
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_nodeId <-- get_BrowsePathSource(l_index);
            free_node_id_pointer(l_nodeId)
        INVARIANT
            TRUE = FALSE
        VARIANT
            0
        END
        ;
        init_BrowsePathSource
    END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathResult(expandedNodeId) =
    VAR
        l_result_isFull,
        l_alloc,
        l_target_copy
    IN
        l_result_isFull <-- get_BrowsePathResult_IsFull;
        IF l_result_isFull = FALSE THEN
            l_alloc, l_target_copy  <-- get_copy_ExpandedNodeId(expandedNodeId);
            IF l_alloc = TRUE THEN
                add_BrowsePathResult(l_target_copy);
                statusCode_operation := e_sc_ok
            ELSE
                statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            statusCode_operation := e_sc_bad_query_too_complex
        END
       END
    ;

    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(expandedNodeId, index) =
    VAR
        l_isFull,
        l_alloc,
        l_copy
    IN
        l_isFull <-- get_BrowsePathRemaining_IsFull;
        IF l_isFull = FALSE THEN
            l_alloc, l_copy  <-- get_copy_ExpandedNodeId(expandedNodeId);
            IF l_alloc = TRUE THEN
                add_BrowsePathResultRemaining(l_copy, index);
                statusCode_operation := e_sc_uncertain_reference_out_of_server
             ELSE
                statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            statusCode_operation := e_sc_bad_query_too_complex
        END
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg(browsePath, in_statusCode_operation) =
    VAR
        l_size,
        l_continue,
        l_index,
        l_size_result,
        l_size_remaining,
        l_statusCode_alloc,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_op
    IN
        out_statusCode_operation := in_statusCode_operation;
        l_size_result <-- get_BrowsePathResultSize;
        l_size_remaining <-- get_BrowsePathRemainingSize;
        l_size := l_size_result + l_size_remaining;
        IF l_size <= k_n_BrowsePathResPerPath_max THEN
            l_statusCode_alloc <-- alloc_BrowsePath_Res_Target(browsePath, l_size);
            IF l_statusCode_alloc = e_sc_ok THEN
                l_statusCode_op := out_statusCode_operation;
                /* Move result from BrowsePathResult */
                out_statusCode_operation, l_statusCode_alloc <--
                    copy_browsePathResult_to_msg_1(browsePath,
                                                   l_statusCode_op,
                                                   l_size_result);

                IF l_statusCode_alloc = e_sc_ok THEN
                    l_statusCode_op := out_statusCode_operation;
                    out_statusCode_operation <--
                        copy_browsePathResult_to_msg_2(browsePath,
                                                       l_statusCode_op,
                                                       l_size_remaining)
                END
            ELSE
                out_statusCode_operation := e_sc_bad_out_of_memory
            END
        ELSE
            out_statusCode_operation := e_sc_bad_too_many_matches
        END
    END
    ;

    out_statusCode_operation, statusCode_alloc <-- copy_browsePathResult_to_msg_1(browsePath, in_statusCode_operation, size_result) =
    VAR
        l_continue,
        l_index,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_alloc
    IN
        statusCode_alloc := e_sc_ok;
        out_statusCode_operation := in_statusCode_operation;

        /* Move result from BrowsePathResult */
        l_continue <-- init_iter_browsePathSourceIdx(size_result);
        l_index := 0;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId <-- get_BrowsePathResult(l_index);
            statusCode_alloc <-- add_BrowsePath_Res_Target(browsePath, l_expandedNodeId);
            IF statusCode_alloc /= e_sc_ok THEN
                out_statusCode_operation := e_sc_bad_out_of_memory;
                l_continue := FALSE
            END
        INVARIANT
            browsePathSourceIdx_to_iterate <: NAT1 &
            browsePathSourceIdx_iterated   <: NAT1 &
            nextBrowsePathSourceIdx : NAT1 &
            browsePathSourceIdx_iterated = 1 .. l_index &
            browsePathSourceIdx_to_iterate = l_index + 1 .. size_result &

            l_continue = bool(statusCode_alloc = e_sc_ok & (l_index < size_result)) &
            nextBrowsePathSourceIdx = l_index + 1 &

            statusCode_alloc : t_StatusCode_i &
            statusCode_alloc : t_StatusCode   &
            out_statusCode_operation : {e_sc_ok,e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            card(BrowsePath_Res_Target_Node(browsePath)) = l_index &

            {browsePath} <<| BrowsePath_Res_Target_Node =
                {browsePath} <<| BrowsePath_Res_Target_Node$0 &
            {browsePath} <<| BrowsePath_Res_Target_Index =
                {browsePath} <<| BrowsePath_Res_Target_Index$0 &

            (statusCode_alloc = e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = 1..l_index <| BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..l_index) * {k_n_noRemainingPathIndex}
            ) &
            (statusCode_alloc /= e_sc_ok =>
                BrowsePath_Res_Target_Node(browsePath) = 1..l_index - 1 <| BrowsePathResult &
                BrowsePath_Res_Target_Index(browsePath) =
                    (1..l_index - 1) * {k_n_noRemainingPathIndex}
            )
        VARIANT
            size_result - l_index
        END
    END
    ;

    out_statusCode_operation <-- copy_browsePathResult_to_msg_2(browsePath, in_statusCode_operation, nb_max_ref) =
    VAR
        l_continue,
        l_index,
        l_expandedNodeId,
        l_remainingIndex,
        l_statusCode_alloc
    IN
        out_statusCode_operation := in_statusCode_operation;
        l_statusCode_alloc := e_sc_ok;

        l_continue <-- init_iter_browsePathSourceIdx(nb_max_ref);
        l_index := 0;
        WHILE l_continue = TRUE
        DO
            l_continue, l_index <-- continue_iter_browsePathSourceIdx;
            l_expandedNodeId, l_remainingIndex <-- get_BrowsePathRemaining(l_index);
            l_statusCode_alloc <-- add_BrowsePath_Res_Target_withRemainingPath(browsePath, l_expandedNodeId, l_remainingIndex);
            IF l_statusCode_alloc /= e_sc_ok THEN
                out_statusCode_operation := e_sc_bad_out_of_memory;
                l_continue := FALSE
            END
        INVARIANT

            browsePathSourceIdx_to_iterate <: NAT1 &
            browsePathSourceIdx_iterated   <: NAT1 &
            nextBrowsePathSourceIdx : NAT1 &
            browsePathSourceIdx_iterated = 1 .. l_index &
            browsePathSourceIdx_to_iterate = l_index + 1 .. nb_max_ref &

            l_continue = bool(l_statusCode_alloc = e_sc_ok & (l_index < nb_max_ref)) &
            nextBrowsePathSourceIdx = l_index + 1 &

            out_statusCode_operation : {e_sc_ok,e_sc_uncertain_reference_out_of_server,
                                        e_sc_bad_out_of_memory} &

            {browsePath} <<| BrowsePath_Res_Target_Node =
                {browsePath} <<| BrowsePath_Res_Target_Node$0 &
            {browsePath} <<| BrowsePath_Res_Target_Index =
                {browsePath} <<| BrowsePath_Res_Target_Index$0 &

            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Node$0(browsePath) &
            1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index(browsePath) =
                1..size(BrowsePathResult) <| BrowsePath_Res_Target_Index$0(browsePath) &

            (l_statusCode_alloc = e_sc_ok =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    1..l_index <| BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    1..l_index <| BrowsePathRemainingIndex
            ) &
            (l_statusCode_alloc /= e_sc_ok =>
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Node(browsePath) =
                    1..l_index - 1 <| BrowsePathRemainingNodeId &
                1..size(BrowsePathResult) <<| BrowsePath_Res_Target_Index(browsePath) =
                    1..l_index - 1 <| BrowsePathRemainingIndex
            )

        VARIANT
            nb_max_ref - l_index
        END
    END
    ;

    statusCode_operation, nbReferences <-- compute_browse_result_from_source(source, browseDirection, referenceTypeId, includedSubtypes) =
    VAR
        l_browse_statusCode,
        l_continuationPoint
    IN
        nbReferences := 0;
        statusCode_operation <-- set_browse_value_context(c_session_indet, 0, c_NodeId_indet, source,
            browseDirection, referenceTypeId, includedSubtypes,
            c_BrowseNodeClassMask_indet, c_BrowseResultMask_all, FALSE);
        IF statusCode_operation = e_sc_ok THEN
            l_browse_statusCode,
            l_continuationPoint,
            nbReferences <-- compute_browse_result;
            clear_browse_value_context;
            statusCode_operation <-- get_translateStatus_from_browseStatus(l_browse_statusCode)
        END
    END
    ;

    statusCode_operation <-- treat_browse_result_one_source(index, targetName, nbReferences) =
    VAR
        l_continue,
        l_browseResult_index,
        l_res_refTypeId,
        l_res_isForward,
        l_res_ExpandedNodeId,
        l_res_BrowseName,
        l_res_DisplayName,
        l_res_NodeClass,
        l_res_TypeDefinition,
        l_found,
        l_translate_statusCode,
        l_local_server,
        l_source_tmp
    IN
        // No nodeId is found
        statusCode_operation := e_sc_bad_no_match;
        l_continue <-- init_iter_translate_browseResult(nbReferences);
        WHILE l_continue = TRUE
        DO
            l_continue, l_browseResult_index <-- continue_iter_translate_browseResult;
            l_res_refTypeId,
            l_res_isForward,
            l_res_ExpandedNodeId,
            l_res_BrowseName,
            l_res_DisplayName,
            l_res_NodeClass,
            l_res_TypeDefinition
            <-- getall_browse_result_reference_at(l_browseResult_index);

            l_found <-- is_QualifiedNames_Equal(targetName, l_res_BrowseName);
            IF l_found = TRUE THEN
                /* Add in result if there is enough space */
                l_translate_statusCode <-- checkAndAdd_BrowsePathResult(l_res_ExpandedNodeId);
                /* keep old status if operation is OK but get an out of server previoulsy */
                IF (l_translate_statusCode = e_sc_ok & statusCode_operation = e_sc_uncertain_reference_out_of_server) THEN
                    skip
                ELSE
                    statusCode_operation := l_translate_statusCode
                END
            ELSIF l_res_ExpandedNodeId /= c_ExpandedNodeId_indet
            THEN
                // check expandedNodeId is local, and get associated nodeId if exists
                l_local_server, l_source_tmp <-- getall_conv_ExpandedNodeId_NodeId(l_res_ExpandedNodeId);
                IF l_local_server = FALSE
                THEN
                    statusCode_operation <-- checkAndAdd_BrowsePathRemaining(l_res_ExpandedNodeId, index)
                END
            END
            ;
            l_continue := bool(l_continue = TRUE &
                (statusCode_operation = e_sc_ok or
                    statusCode_operation =  e_sc_uncertain_reference_out_of_server or
                    statusCode_operation =  e_sc_bad_no_match))

        INVARIANT
            l_continue = bool(translate_browseResult_to_iterate = {}) &
            nb_translate_browseResult_max_refs : NAT &
            translate_browseResult_to_iterate <: NAT &
            translate_browseResult_iterated   <: NAT &
            translate_browseResult_to_iterate /\ translate_browseResult_iterated = {} &
            nb_translate_browseResult_max_refs = card(translate_browseResult_to_iterate \/ translate_browseResult_iterated)
        VARIANT
            card(translate_browseResult_to_iterate)
        END
    END
    ;

    statusCode_operation <-- treat_one_translate_browse_path_1(statusCode_init, source) =
    VAR
        l_continue,
        l_continue_1,
        l_source_copy,
        l_index,
        l_relativePathElt
    IN
        statusCode_operation := statusCode_init;

        l_continue, l_source_copy <-- copy_node_id_pointer_content (source);
        l_index := 0;
        IF l_continue = TRUE THEN
            add_BrowsePathSource(l_source_copy) /* copy the source in source sequence */
        ELSE
            statusCode_operation := e_sc_bad_out_of_memory
        END
        ;

        /* Iterate on element list of the path
           - BrowsePathResult is reset at each step to keep only intermediate target
           - BrowsePathRemainingNodeId/Index are cumulative
           - Final target are last step BrowsePathResult + BrowsePathRemainingNodeId
        */
        WHILE l_continue = TRUE
        DO
            free_BrowsePathResult;
            l_continue, l_relativePathElt, l_index <-- continue_iter_relativePath;

            l_continue_1 := l_continue;
            statusCode_operation, l_continue <--
                treat_one_translate_browse_path_1_1(l_relativePathElt,
                                                    l_index, l_continue_1)
        INVARIANT
            elements_to_iterate : seq(t_RelativePathElt)  &
            elements_iterated   : seq(t_RelativePathElt)  &
            elements_iterated ^ elements_to_iterate = relativePathEls &

            l_continue = bool(size(elements_to_iterate) > 0 &
                              (size(elements_iterated) = 0 or
                               statusCode_operation = e_sc_ok ))     &

            d_inv_browse_result_out

        VARIANT
            card(elements_to_iterate)
        END
    END
    ;

    statusCode_operation, p_continue <-- treat_one_translate_browse_path_1_1(rel_path_elt, index, continue) =
    BEGIN
        statusCode_operation <--
            treat_one_relative_path_element(rel_path_elt, index);

        free_BrowsePathSource;
        p_continue := bool(continue = TRUE &
                           (statusCode_operation = e_sc_ok or
                            statusCode_operation = e_sc_uncertain_reference_out_of_server));
        IF p_continue = TRUE
        THEN
            statusCode_operation <-- copy_browsePathResult_to_source
        END
    END

END
